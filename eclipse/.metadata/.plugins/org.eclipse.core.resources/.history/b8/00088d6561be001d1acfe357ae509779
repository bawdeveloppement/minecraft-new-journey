package net.minecraft.inventory;

import java.util.Iterator;
import java.util.Map;
import net.minecraft.block.BlockAnvil;
import net.minecraft.block.state.IBlockState;
import net.minecraft.enchantment.Enchantment;
import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.util.BlockPos;
import net.minecraft.world.World;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class ContainerRepair extends Container {
   private static final Logger logger = LogManager.getLogger();
   private IInventory outputSlot;
   private IInventory inputSlots;
   private World theWorld;
   private BlockPos selfPosition;
   public int maximumCost;
   private int materialCost;
   private String repairedItemName;
   private final EntityPlayer thePlayer;

   public ContainerRepair(InventoryPlayer playerInventory, World worldIn, EntityPlayer player) {
      this(playerInventory, worldIn, BlockPos.ORIGIN, player);
   }

   public ContainerRepair(InventoryPlayer playerInventory, final World worldIn, final BlockPos blockPosIn, EntityPlayer player) {
      this.outputSlot = new InventoryCraftResult();
      this.inputSlots = new InventoryBasic("Repair", true, 2) {
         public void markDirty() {
            super.markDirty();
            ContainerRepair.this.onCraftMatrixChanged(this);
         }
      };
      this.selfPosition = blockPosIn;
      this.theWorld = worldIn;
      this.thePlayer = player;
      this.addSlotToContainer(new Slot(this.inputSlots, 0, 27, 47));
      this.addSlotToContainer(new Slot(this.inputSlots, 1, 76, 47));
      this.addSlotToContainer(new Slot(this.outputSlot, 2, 134, 47) {
         public boolean isItemValid(ItemStack stack) {
            return false;
         }

         public boolean canTakeStack(EntityPlayer playerIn) {
            return (playerIn.capabilities.isCreativeMode || playerIn.experienceLevel >= ContainerRepair.this.maximumCost) && ContainerRepair.this.maximumCost > 0 && this.getHasStack();
         }

         public void onPickupFromSlot(EntityPlayer playerIn, ItemStack stack) {
            if(!playerIn.capabilities.isCreativeMode) {
               playerIn.addExperienceLevel(-ContainerRepair.this.maximumCost);
            }

            ContainerRepair.this.inputSlots.setInventorySlotContents(0, (ItemStack)null);
            if(ContainerRepair.this.materialCost > 0) {
               ItemStack itemstack = ContainerRepair.this.inputSlots.getStackInSlot(1);
               if(itemstack != null && itemstack.stackSize > ContainerRepair.this.materialCost) {
                  itemstack.stackSize -= ContainerRepair.this.materialCost;
                  ContainerRepair.this.inputSlots.setInventorySlotContents(1, itemstack);
               } else {
                  ContainerRepair.this.inputSlots.setInventorySlotContents(1, (ItemStack)null);
               }
            } else {
               ContainerRepair.this.inputSlots.setInventorySlotContents(1, (ItemStack)null);
            }

            ContainerRepair.this.maximumCost = 0;
            IBlockState iblockstate = worldIn.getBlockState(blockPosIn);
            if(!playerIn.capabilities.isCreativeMode && !worldIn.isRemote && iblockstate.getBlock() == Blocks.anvil && playerIn.getRNG().nextFloat() < 0.12F) {
               int l = ((Integer)iblockstate.getValue(BlockAnvil.DAMAGE)).intValue();
               ++l;
               if(l > 2) {
                  worldIn.setBlockToAir(blockPosIn);
                  worldIn.playAuxSFX(1020, blockPosIn, 0);
               } else {
                  worldIn.setBlockState(blockPosIn, iblockstate.withProperty(BlockAnvil.DAMAGE, Integer.valueOf(l)), 2);
                  worldIn.playAuxSFX(1021, blockPosIn, 0);
               }
            } else if(!worldIn.isRemote) {
               worldIn.playAuxSFX(1021, blockPosIn, 0);
            }
         }
      });

      for(int i = 0; i < 3; ++i) {
         for(int j = 0; j < 9; ++j) {
            this.addSlotToContainer(new Slot(playerInventory, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));
         }
      }

      for(int k = 0; k < 9; ++k) {
         this.addSlotToContainer(new Slot(playerInventory, k, 8 + k * 18, 142));
      }
   }

   public void onCraftMatrixChanged(IInventory inventoryIn) {
      super.onCraftMatrixChanged(inventoryIn);
      if(inventoryIn == this.inputSlots) {
         this.updateRepairOutput();
      }
   }

   public void updateRepairOutput() {
	   ItemStack itemStack1 = inputSlots.getStackInSlot(0);
	    this.maximumCost = 1;
	    int materialCost = 0;
	    int enchantmentCost = 0;
	    int itemStack1Damage = itemStack1.getItemDamage();

	    if (itemStack1 == null) {
	        outputSlot.setInventorySlotContents(0, null);
	        this.maximumCost = 0;
	        return;
	    }

	    ItemStack itemStack2 = inputSlots.getStackInSlot(1);
	    Map<Integer, Integer> enchantmentsMap = EnchantmentHelper.getEnchantments(itemStack1);
	    boolean isItemStack2EnchantedBook = false;
	    int itemStack2RepairCost = itemStack2 == null ? 0 : itemStack2.getRepairCost();
	    materialCost += itemStack1.getRepairCost() + itemStack2RepairCost;

	    if (itemStack2 != null) {
	        isItemStack2EnchantedBook = itemStack2.getItem() == Items.enchanted_book
	                && Items.enchanted_book.getEnchantments(itemStack2).tagCount() > 0;

	        if (itemStack1.isItemStackDamageable() && itemStack1.getItem().getIsRepairable(itemStack1, itemStack2)) {
	            int maxDamage = itemStack1.getMaxDamage();
	            int minDamage = Math.min(itemStack1Damage, maxDamage / 4);

	            if (minDamage <= 0) {
	                outputSlot.setInventorySlotContents(0, null);
	                this.maximumCost = 0;
	                return;
	            }

	            int repairedItems = 0;

	            for (int i = 0; minDamage > 0 && i < itemStack2.stackSize; i++) {
	                itemStack1Damage -= minDamage;
	                ++repairedItems;
	                minDamage = Math.min(itemStack1Damage, maxDamage / 4);
	            }

	            materialCost += repairedItems;
	        } else {
	            if (!isItemStack2EnchantedBook
	                    && (itemStack1.getItem() != itemStack2.getItem() || !itemStack1.isItemStackDamageable())) {
	                outputSlot.setInventorySlotContents(0, null);
	                this.maximumCost = 0;
	                return;
	            }

	            if (itemStack1.isItemStackDamageable() && !isItemStack2EnchantedBook) {
	                int itemStack1MaxDamage = itemStack1.getMaxDamage();
	                int itemStack2MaxDamage = itemStack2.getMaxDamage();
	                int itemStack1RepairCost = itemStack1MaxDamage - itemStack1Damage;
	                int itemStack2RepairCost1 = itemStack2MaxDamage - itemStack2.getItemDamage();
	                int combinedItemStack1and2RepairCost = itemStack2RepairCost1 + itemStack1MaxDamage * 12 / 100;
	                int newItemStack1Damage = itemStack1RepairCost + combinedItemStack1and2RepairCost;
	                int maxDamage = itemStack1.getMaxDamage();
	                int reducedNewDamage = maxDamage - newItemStack1Damage;

	                if (reducedNewDamage < 0) {
	                    reducedNewDamage = 0;
	                }

	                if (reducedNewDamage < itemStack1.getMetadata()) {
	                    itemStack1Damage += reducedNewDamage;
	                    materialCost += 2;
	                }
	            }

	            Map<Integer, Integer> itemStack2EnchantmentsMap = EnchantmentHelper.getEnchantments(itemStack2);

	            for (Map.Entry<Integer, Integer> entry : itemStack2EnchantmentsMap.entrySet()) {
	                int enchantmentID = entry
   }

   public void onCraftGuiOpened(ICrafting listener) {
      super.onCraftGuiOpened(listener);
      listener.sendProgressBarUpdate(this, 0, this.maximumCost);
   }

   public void updateProgressBar(int id, int data) {
      if(id == 0) {
         this.maximumCost = data;
      }
   }

   public void onContainerClosed(EntityPlayer playerIn) {
      super.onContainerClosed(playerIn);
      if(!this.theWorld.isRemote) {
         for(int i = 0; i < this.inputSlots.getSizeInventory(); ++i) {
            ItemStack itemstack = this.inputSlots.removeStackFromSlot(i);
            if(itemstack != null) {
               playerIn.dropPlayerItemWithRandomChoice(itemstack, false);
            }
         }
      }
   }

   public boolean canInteractWith(EntityPlayer playerIn) {
      return this.theWorld.getBlockState(this.selfPosition).getBlock() != Blocks.anvil?false:playerIn.getDistanceSq((double)this.selfPosition.getX() + 0.5D, (double)this.selfPosition.getY() + 0.5D, (double)this.selfPosition.getZ() + 0.5D) <= 64.0D;
   }

   public ItemStack transferStackInSlot(EntityPlayer playerIn, int index) {
      ItemStack itemstack = null;
      Slot slot = (Slot)this.inventorySlots.get(index);
      if(slot != null && slot.getHasStack()) {
         ItemStack itemstack1 = slot.getStack();
         itemstack = itemstack1.copy();
         if(index == 2) {
            if(!this.mergeItemStack(itemstack1, 3, 39, true)) {
               return null;
            }

            slot.onSlotChange(itemstack1, itemstack);
         } else if(index != 0 && index != 1) {
            if(index >= 3 && index < 39 && !this.mergeItemStack(itemstack1, 0, 2, false)) {
               return null;
            }
         } else if(!this.mergeItemStack(itemstack1, 3, 39, false)) {
            return null;
         }

         if(itemstack1.stackSize == 0) {
            slot.putStack((ItemStack)null);
         } else {
            slot.onSlotChanged();
         }

         if(itemstack1.stackSize == itemstack.stackSize) {
            return null;
         }

         slot.onPickupFromSlot(playerIn, itemstack1);
      }

      return itemstack;
   }

   public void updateItemName(String newName) {
      this.repairedItemName = newName;
      if(this.getSlot(2).getHasStack()) {
         ItemStack itemstack = this.getSlot(2).getStack();
         if(StringUtils.isBlank(newName)) {
            itemstack.clearCustomName();
         } else {
            itemstack.setStackDisplayName(this.repairedItemName);
         }
      }

      this.updateRepairOutput();
   }
}
